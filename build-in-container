#!/usr/bin/env bash

# Where the final toolchain is installed
PREFIX=${PWD}/avr32-toolchain

# Command to run inside docker container
cmd="env PREFIX=${PREFIX} make -f Makefile"

# Alternative command to run inside docker container
cmd_gs="env PREFIX=${PREFIX} make -f Makefile.newlib-gs-1.16.mk"

# The docker image that is created and which we use for the toolchain build
image=ubuntu-avr32-builder

# Docker context directory (and location of Dockerfile)
docker_context=${image}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTION] [IMAGE...] -- CMD

Run CMD in (${image}) container. Default CMD is:

    ${cmd}

If container image does not exist, it will be built using '${docker_context}/Dockerfile'

OPTIONs:
  -gs      Use build command that will use newlib v1.16.0 with GomSpace modifications
           See https://github.com/GomSpace/avr32-newlib

Misc OPTIONs:
  -r       Run as root inside container (without user mapping)
           Default is to run as current user and group: $(id -u):$(id -g)
  -n       Dryrun
  -h       Print this help
EOF
    exit 0
}

die() { >&2 echo "$*"; exit 1; }

echo_norun() { >&2 echo -e "\$ $*"; }
echo_dryrun() { if [ "${dryrun}" ]; then echo_norun "$*"; else echo_run "$*"; fi; }
echo_run() { echo_norun "$*"; eval "$*"; }

while [ "$1" ]; do
    case "$1" in
        -gs) cmd=${cmd_gs} ;;
        -r) with_root=yes ;;
        -n) dryrun=yes ;;
        -h) usage && exit 0 ;;
        --) shift; cmd="$*"; break ;;
        ++) shift; cmd="${cmd} $*"; break ;;
        -*) die "Unknown option: $1" ;;
        *) image="$1" ;;
    esac
    shift
done

if ! docker image ls ${image} | grep -q "${image}"; then
    echo "Docker image ${image} not found, will build it now"
    [ -f ${docker_context}/Dockerfile ] ||
        die "'${docker_context}/Dockerfile' not found. Cannot build"

    echo_dryrun "docker build -t ${image} ${docker_context}" ||
        die "docker build FAILED"
fi

[ -n "${with_root}" ] ||
    with_user="--user $(id -u):$(id -g)"

mounts="-v${PWD}:${PWD} -v/etc/passwd:/etc/passwd -v/etc/group:/etc/group"
env="-eUID=$(id -u) -eGID=$(id -g)"

echo_dryrun "docker stop ${image} 2>/dev/null"
dockercmd="docker run -it --init --rm --name=${image} -w${PWD} ${mounts} ${env} ${with_user} ${image}"

if [ -n "${cmd}" ]; then
    echo "Running command inside container"
    dockercmd="${dockercmd} bash -c '${cmd}'"
else
    echo "Starting interactive session of container ${image}"
    echo "Current directory is mounted inside the container in /cwd"
    echo "Type 'exit' (or CTRL+d) to terminate the container session"
    echo
fi

echo_dryrun "time ${dockercmd}"
